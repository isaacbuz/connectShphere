version: '3.9'

services:
  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/starling_ai
      - REDIS_URL=redis://redis:6379
      - KAFKA_BROKERS=kafka:9092
      - IPFS_API=http://ipfs:5001
    depends_on:
      - mongodb
      - redis
      - kafka
      - ipfs
    volumes:
      - ./src:/app/src
      - ./config:/app/config
    networks:
      - starling_ai-network

  # AI Agent Service
  ai-agents:
    build:
      context: .
      dockerfile: Dockerfile.agents
    ports:
      - "8000:8000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - KAFKA_BROKERS=kafka:9092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - kafka
    volumes:
      - ./src/agents:/app/agents
      - ./data/models:/app/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - starling_ai-network

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=starling_ai
    volumes:
      - mongodb_data:/data/db
    networks:
      - starling_ai-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - starling_ai-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - starling_ai-network

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - starling_ai-network

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - starling_ai-network

  # Pinecone Vector DB (Mock for local dev)
  vector-db:
    build:
      context: .
      dockerfile: Dockerfile.vectordb
    ports:
      - "8888:8888"
    volumes:
      - vector_data:/data
    networks:
      - starling_ai-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - starling_ai-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - starling_ai-network

  # Hardhat Ethereum Node (for development)
  hardhat:
    build:
      context: .
      dockerfile: Dockerfile.blockchain
    ports:
      - "8545:8545"
    command: npx hardhat node
    volumes:
      - ./src/blockchain:/app/blockchain
    networks:
      - starling_ai-network

volumes:
  mongodb_data:
  redis_data:
  ipfs_data:
  vector_data:
  prometheus_data:
  grafana_data:

networks:
  starling_ai-network:
    driver: bridge 